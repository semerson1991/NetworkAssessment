package com.semerson.networkassessment.activities.results.MainNavigationFragments.home.singleview;


import android.app.Activity;
import android.content.Context;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.app.Fragment;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.github.mikephil.charting.charts.PieChart;
import com.semerson.networkassessment.activities.results.Chart.ChartDescription;
import com.semerson.networkassessment.activities.results.Chart.LegendHeadings;
import com.semerson.networkassessment.activities.results.Chart.PieChartCreator;
import com.semerson.networkassessment.R;
import com.semerson.networkassessment.controller.FragmentHost;
import com.semerson.networkassessment.storage.results.ResultController;
import com.semerson.networkassessment.storage.results.ScanResults;
import com.semerson.networkassessment.storage.results.VulnerabilityResult;
import com.semerson.networkassessment.utils.StyledText;
import com.semerson.networkassessment.utils.table.Table;
import com.semerson.networkassessment.utils.table.TableCreator;
import com.semerson.networkassessment.utils.table.TableHeadings;
import com.semerson.networkassessment.utils.table.TableRow;
import com.semerson.networkassessment.utils.table.TableRowData;

import java.util.List;
import java.util.Map;

/**
 * A simple {@link Fragment} subclass.
 */
public class VulnerabilityFilterComplexity extends Fragment implements View.OnClickListener {


    private static final String TITLE = "Vulnerabilities with attack complexity: ";
    private Context context;
    private ScanResults scanResults;
    private ResultController resultController;
    private LinearLayout mainLayout;

    private FragmentHost fragmentHost;
    private TextView vulnText;
    private String complexityLevel;

    public VulnerabilityFilterComplexity() {
        // Required empty public constructor
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        scanResults = (ScanResults) getArguments().getParcelable("scan-results");
        complexityLevel = getArguments().getString("complexity-level");
        resultController = new ResultController(scanResults.getHosts());

        return inflater.inflate(R.layout.fragment_host_vulnerability_details, container, false);
    }

    @Override //TITLE, VULN RESULTS
    public void onViewCreated(View view, Bundle savedInstanceState) {
        mainLayout = view.findViewById(R.id.mainLayout);
        TextView textViewTitle = view.findViewById(R.id.txtVulnsTitle);
        textViewTitle.setText(TITLE + complexityLevel);

        Map<String, Float> data = resultController.getVulnFamilyFilterByComplexityLevel(complexityLevel);

        PieChartCreator pieChartCreator = new PieChartCreator();
        PieChart chart = pieChartCreator.createChart(context, 1000, 1000);
        pieChartCreator.setChartConfig(ChartDescription.VULN_CATEGORY, true, LegendHeadings.VULN_CATEGORY, chart, data, PieChartCreator.DEFAULT_MIXED);

        mainLayout.addView(chart);

        Drawable customBoarder = getResources().getDrawable(R.drawable.customboarder_top_bottom_isvisible);
        List<VulnerabilityResult> vulnerabilityResults = resultController.getVulnerabiltiesFilterByComplexityLevel(complexityLevel);

        resultController.filterByThreatRatingHighToLow(vulnerabilityResults);

        Table table = new Table();
        for (VulnerabilityResult result : vulnerabilityResults) {
            StyledText styledRating = result.getThreatRatingStyledText();

            TableRowData tableRowDataHost = new TableRowData(result.getNvtName(), Gravity.CENTER);
            TableRowData tableRowDataLastScanned = new TableRowData(result.getVulnFamily(), Gravity.CENTER);
            TableRowData tableRowDataRisksFound = new TableRowData(styledRating.getText(), styledRating.getStyle(), Gravity.CENTER);

            TableRow tableRow = new TableRow(tableRowDataHost, tableRowDataLastScanned, tableRowDataRisksFound);
            tableRow.setOnClickListener(this);
            tableRow.setTag(result);
            table.appendTableRow(tableRow);
        }
        TableCreator tableCreator = new TableCreator();
        tableCreator.appendTableHeader(context, mainLayout, TableHeadings.VULN_NAME, TableHeadings.VULN_FAMILY, TableHeadings.THREAT_LEVEL);
        tableCreator.createTableViews(context, mainLayout, customBoarder, table);
    }


    public static VulnerabilityFilterComplexity newInstance(ScanResults scanResults, String filteredThreatLevel) {
        VulnerabilityFilterComplexity fragment = new VulnerabilityFilterComplexity();
        Bundle bundle = new Bundle();
        bundle.putParcelable("scan-results", scanResults);
        bundle.putString("complexity-level", filteredThreatLevel);
        fragment.setArguments(bundle);

        return fragment;
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        context = activity;
        try {
            fragmentHost = (FragmentHost) context;
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString() + "must implement FragmentHost");
        }
    }

    @Override
    public void onClick(View v) {
        if (v instanceof LinearLayout) {
            Object object = v.getTag();
            if (object != null && object instanceof VulnerabilityResult) {
                Fragment fragment = VulnerabilityDetailsFragment.newInstance(scanResults, (VulnerabilityResult) object);
                fragmentHost.setFragment(fragment, true);
            }
        }
    }


}
