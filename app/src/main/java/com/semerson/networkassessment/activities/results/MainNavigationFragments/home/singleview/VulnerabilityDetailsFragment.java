package com.semerson.networkassessment.activities.results.MainNavigationFragments.home.singleview;


import android.app.Activity;
import android.content.Context;
import android.graphics.Color;
import android.os.Bundle;
import android.app.Fragment;
import android.text.util.Linkify;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;

import com.semerson.networkassessment.R;
import com.semerson.networkassessment.activities.home.WelcomeActivity;
import com.semerson.networkassessment.controller.FragmentHost;
import com.semerson.networkassessment.storage.AppStorage;
import com.semerson.networkassessment.storage.results.ResultController;
import com.semerson.networkassessment.storage.results.ScanResults;
import com.semerson.networkassessment.storage.results.UrlInfo;
import com.semerson.networkassessment.storage.results.VulnerabilityResult;

import java.util.List;

/**
 * A simple {@link Fragment} subclass.
 */
public class VulnerabilityDetailsFragment extends Fragment {


    private Context context;
    private ScanResults scanResults;
    private ResultController resultController;
    private LinearLayout mainLayout;
    private VulnerabilityResult vulnerabilityResult;
    private FragmentHost fragmentHost;

    public VulnerabilityDetailsFragment() {
        // Required empty public constructor
    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        vulnerabilityResult = getArguments().getParcelable("vuln-info");
        scanResults = (ScanResults) getArguments().getParcelable("scan-results");
        resultController = new ResultController(scanResults.getHosts());
        // Inflate the layout for this fragment

        return inflater.inflate(R.layout.fragment_vulnerability_details, container, false);
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        mainLayout = (LinearLayout) view.findViewById(R.id.mainLayout);
        TextView textViewTitle = (TextView) view.findViewById(R.id.txtVulnsTitle);
        textViewTitle.setText(vulnerabilityResult.getNvtName());

        ScrollView scrollView = getActivity().findViewById(R.id.scrollView);
        scrollView.scrollTo(0,0);

        TextView textview = (TextView) view.findViewById(R.id.txrVulnInfo);
        StringBuilder stringBuilder = new StringBuilder();

        String newline = System.getProperty("line.separator");
        String newParagraph = System.getProperty("line.separator") + " " + System.getProperty("line.separator");


        if (!vulnerabilityResult.getSummary().isEmpty()){
            stringBuilder.append("Summary: "+vulnerabilityResult.getSummary() + newline + newline);
        }

        if (!vulnerabilityResult.getImpact().isEmpty()){
            stringBuilder.append("Impact: " + vulnerabilityResult.getImpact() + newline + newline);
        }

        if (!vulnerabilityResult.getSolution().isEmpty()){
            stringBuilder.append("Solution: "+vulnerabilityResult.getSolution() + newline + newline);
        }

        textview.setAutoLinkMask(Linkify.WEB_URLS);
        textview.setLinksClickable(true);
        textview.setLinkTextColor(Color.BLUE);
        textview.setFocusable(false);

        if (AppStorage.getValue(WelcomeActivity.getAppContext(), AppStorage.ADVANCED_MODE, false)){
            String technicalDetails = vulnerabilityResult.getTechnicalDetails();
            if (!technicalDetails.isEmpty()) {
                stringBuilder.append("Technical Details:");
                stringBuilder.append(newline);
                stringBuilder.append(vulnerabilityResult.getTechnicalDetails());
                stringBuilder.append(newParagraph);
            }
        }

        textview.setText(stringBuilder.toString());

       // Fragment fragment = YoutubeFragment.newInstance();
      //  fragmentHost.setYoutubeFragment("5xVh-7ywKpE");

        stringBuilder.setLength(0);

        Integer urlCount = 0;
        List<UrlInfo> urls = vulnerabilityResult.getUrls();
        if (!urls.isEmpty()){
            stringBuilder.append("Helpful URL's: "+newParagraph);
            for (UrlInfo urlinfo : urls){
                urlCount ++;
                stringBuilder.append("("+urlCount.toString()+") " +urlinfo.getDescription() + newParagraph + urlinfo.getUrl());
                stringBuilder.append(newParagraph);
            }
        }

        TextView textView2 = new TextView(context);
        textView2.setAutoLinkMask(Linkify.WEB_URLS);
        textView2.setLinksClickable(true);
        textView2.setLinkTextColor(Color.BLUE);
        textView2.setFocusable(true);
        textView2.setText(stringBuilder.toString());

        mainLayout.addView(textView2);
    }

    public static VulnerabilityDetailsFragment newInstance(ScanResults scanResults, VulnerabilityResult vulnerabilityResult) {
        VulnerabilityDetailsFragment fragment = new VulnerabilityDetailsFragment();
        Bundle bundle = new Bundle();
        bundle.putParcelable("vuln-info", vulnerabilityResult);
        bundle.putParcelable("scan-results", scanResults);
        fragment.setArguments(bundle);
        return fragment;
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        context = activity;

        try {
            fragmentHost = (FragmentHost) context;
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString() + "must implement FragmentHost");
        }
    }
}
