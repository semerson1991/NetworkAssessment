package com.semerson.networkassessment.storage.results;

import android.os.Parcel;
import android.os.Parcelable;
import android.util.Log;

import com.semerson.networkassessment.R;
import com.semerson.networkassessment.activities.home.WelcomeActivity;
import com.semerson.networkassessment.storage.AppStorage;
import com.semerson.networkassessment.utils.StyledText;

import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;


public class VulnerabilityResult implements Parcelable, JsonStorage {

    //For parsing Threat Vectors
    public static final String VECTOR_NONE = "N";
    public static final String VECTOR_LOW = "L";
    public static final String VECTOR_HIGH = "H";
    public static final String VECTOR_PARTIAL = "P";
    public static final String VECTOR_COMPLETE = "C";

    public static final String UNKNOWN = "Unknown";
    public static final String NONE = "None";
    public static final String LOW = "Low";
    public static final String MEDIUM = "Medium";
    public static final String PARTIAL = "Low";
    public static final String HIGH = "High";
    public static final String COMPLETE = "High";


    private String host; //TODO Change protocl numbers (TCP, OpenVas Family (Web application abuses) etc to Static final values!!!
    private Integer portNumber;
    private String portProto;

    private String id;
    private String nvtName;
    private Double nvtScore;
    private String accessVector;
    private String accessComplexityScore;
    private String authenticationScore;
    private String confidentialityScore;
    private String integrityScore;
    private String availabilityScore;

    private String vulnFamily;
    private String solution;
    private String summary;
    private String insight;
    private String impact;
    private String solutionType;

    private String threatRating; //Low Medum High
    private String description;

    private String technicalNvtName;
    private String solutionTypeTechnical;
    private String technicalDetails;
    private Integer urlCount;
    private List<UrlInfo> urls;

    private Double riskScore;

    public VulnerabilityResult() {
        id = "";
        host = "";
        portNumber = -1;
        portProto = "";

        nvtName = "";
        nvtScore = -1.0;
        vulnFamily = "";

        accessVector = "";
        accessComplexityScore = "";
        authenticationScore = "";
        confidentialityScore = "";
        integrityScore = "";
        availabilityScore = "";
        riskScore = 0.0;

        solution = "";
        summary = "";
        impact = "";
        insight = "";
        solutionType = "";

        threatRating = "";
        description = "";

        technicalNvtName = "";
        solutionTypeTechnical = "";
        technicalDetails = "";
        urlCount = 0;

        urls = new ArrayList<>();
    }

    public List<UrlInfo> getUrls() {
        //return SampleResults.getUrls(this);
        return urls;
    }

    public String getId() {
        return id;
    }

    public Integer getPortNumber() {
        return portNumber;
    }

    public String getPortProto() {
        return portProto;
    }

    public String getNvtName() {
        return AppStorage.getValue(WelcomeActivity.getAppContext(), AppStorage.ADVANCED_MODE, false) ? technicalNvtName : nvtName;
    }

    public String getTechnicalNvtName() {
        return technicalNvtName;
    }

    public String getSolutionTypeTechnical() {
        return solutionTypeTechnical;
    }

    public String getTechnicalDetails() {
        return  technicalDetails;
    }

    public Integer getUrlCount() {
        return urlCount;
    }

    public String nvtName() {
        return nvtName;
    }

    public String getAccessVector() {
        return accessVector;
    }

    public String getAccessComplexityScore() {
        return accessComplexityScore;
    }

    public String getAuthenticationScore() {
        return authenticationScore;
    }

    public String getConfidentialityScore() {
        return confidentialityScore;
    }

    public StyledText getConfidentialityScoreStyledText(){
        return getHighToLowStyledText(confidentialityScore);
    }

    public String getIntegrityScore() {
        return integrityScore;
    }

    public StyledText getIntegrityScoreStyledText(){
        return getHighToLowStyledText(integrityScore);
    }

    public String getAvailabilityScore() {
        return availabilityScore;
    }

    public StyledText getAvailabilityScoreStyleText() {
        return getHighToLowStyledText(availabilityScore);
    }

    public StyledText getHighToLowStyledText(String value) { //Value should be High, Medium. or Low
        if (value.equals(LOW)) {
            return new StyledText(LOW, R.style.text_yellow);
        }
        if (value.equals(MEDIUM)){
            return new StyledText(MEDIUM, R.style.text_orange);
        }

        if (value.equals(HIGH)){
            return new StyledText(HIGH, R.style.text_red);
        }
        return new StyledText("Unkown", R.style.text_black);
    }

    public String getSolution() {
        return solution;
    }

    public String solution() {
        return solution;
    }

    public String getSummary() {
        return summary;
    }

    public String summary() {
        return summary;
    }

    public String getInsight() {
        return insight;
    }

    public String getImpact() {
        return impact;
        // return SampleResults.getImpact(this);
    }

    public String getSolutionType() {
        return AppStorage.getValue(WelcomeActivity.getAppContext(), AppStorage.ADVANCED_MODE, false) ? solutionTypeTechnical : solutionType;
    }

    public Double getRiskScore(){
        switch (AppStorage.getValue(WelcomeActivity.getAppContext(), AppStorage.RISK_SCORE_FORMULA, AppStorage.FORMULA_MAXIMUM_TEN)){
            case AppStorage.FORMULA_MAXIMUM_TEN:
                return nvtScore;
            case AppStorage.FORMULA_MAXIMUM_DATE:
                return riskScore;
        }

        return riskScore;
    }

    public String getRiskScoreAsString(){
        switch (AppStorage.getValue(WelcomeActivity.getAppContext(), AppStorage.RISK_SCORE_FORMULA, AppStorage.FORMULA_MAXIMUM_TEN)){
            case AppStorage.FORMULA_MAXIMUM_TEN:
                return nvtScore.toString();
            case AppStorage.FORMULA_MAXIMUM_DATE:
                boolean overOneThousands = riskScore > 1000 ? true : false;

                String riskScoreAsString = String.format("%.2f", riskScore);
                if (overOneThousands){
                    riskScoreAsString = riskScoreAsString + "k";
                }
                return riskScoreAsString;
        }
        return "Unkown";
    }



    public StyledText getRiskScoreStyledText() {
        switch (AppStorage.getValue(WelcomeActivity.getAppContext(), AppStorage.RISK_SCORE_FORMULA, AppStorage.FORMULA_MAXIMUM_TEN)){
            case AppStorage.FORMULA_MAXIMUM_TEN:
                if (nvtScore >= 7){
                    return new StyledText(nvtScore.toString(), R.style.text_red);
                }

                if (nvtScore > 3)  {
                    return new StyledText(nvtScore.toString(), R.style.text_orange);
                }

                return new StyledText(nvtScore.toString(), R.style.text_yellow);
            case AppStorage.FORMULA_MAXIMUM_DATE:
                boolean overOneThousands = riskScore > 1000 ? true : false;

                String riskScoreAsString = String.format("%.2f", riskScore);
                if (overOneThousands){
                    riskScoreAsString = riskScoreAsString + "k";
                }
                return new StyledText(nvtScore.toString(), R.style.text_black);
        }
        return new StyledText(nvtScore.toString(), R.style.text_black);
    }

    public String getDescription() {
        return description;
    }

    public void setNvtName(String nvtName) {
        this.nvtName = nvtName;
    }

    public void setSolution(String solution) {
        this.solution = solution;
        //  SampleResults.getSolution(this);
    }

    public void setSummary(String summary) {
        this.summary = summary;
        // SampleResults.getSummary(this);
    }

    public void setInsight(String insight) {
        this.insight = insight;
        //SampleResults.getInsight(this);
    }

    public void setImpact(String impact) {
        this.impact = impact;
        // SampleResults.getImpact(this);
    }

    public String getVulnFamily() {
        return vulnFamily;
    }

    public String getHost() {
        return host;
    }

    @Override
    public void storeJsonValues(JSONObject object) {
        try {
            storeHostInfo(object);
            storePortInfo(object);
            storeNvtInfo(object);
            storeUrls(object);
            calculateThreatScore(object);
        } catch (JSONException e) {

        } catch (ParseException e) {
            Log.e("VulnerabilityResult", "Error parsing Json");
        }
    }

    /**
     * Calculate the threat score. The equation for this is based on Risk = time * promimity-based-impact / exploit difficulty
     *
     * @param jsonOpenvasNvt
     * @throws JSONException
     * @throws ParseException
     */
    private void calculateThreatScore(JSONObject jsonOpenvasNvt) throws JSONException, ParseException {
        if (!jsonOpenvasNvt.isNull("date")) {
            String date = jsonOpenvasNvt.getString("date");

            DateTimeFormatter dateformat = DateTimeFormat.forPattern("yyyy-MM-dd");

            DateTime vulnerabilityDate = dateformat.parseDateTime(date);

            DateTime currentDate = new DateTime();

            Integer days = Days.daysBetween(vulnerabilityDate, currentDate).getDays();

            // (1) Get the square root of the days
            double timeBasedScore = Math.sqrt(days);

            // (2) Calculate Factorial
            Double av = getScore(accessVector);
            Double c = getScore(confidentialityScore);
            Double i = getScore(integrityScore);
            Double a = getScore(availabilityScore);

            Double total = av + c + i + a;
            int proximityBasedImpactScore = 1;

            for (int count = 1; count <= total; count++) {
                proximityBasedImpactScore = proximityBasedImpactScore * count;
            }

            // (3) Calculate the power
            String accessComplexityScore = getAccessVectorCustomRating();
            String authenticationScore = geAuthenticationVectorCustomRating();

            Double ac = getScoreReversed(accessComplexityScore);
            Double au = getScoreReversed(authenticationScore);

            Double exploitDifficultyScore = ((ac + au) * 2);

            //Calculate risk score
            Double sum = timeBasedScore * proximityBasedImpactScore;
            riskScore = sum / exploitDifficultyScore;
        }
    }

    /**
     * This is for returning the scores from highest (2) to lowest (0)
     *
     * @param score
     * @return
     */
    private Double getScore(String score) {
        switch (score) {
            case NONE:
            case UNKNOWN:
                return 0.0;
            case LOW:
                return 1.0;
            case HIGH:
                return 2.0;
            default:
                return 0.0;
        }
    }

    /**
     * This is for returning the scores from highest (6) to lowest (2)
     *
     * @param score
     * @return
     */
    private Double getScoreReversed(String score) {
        switch (score) {
            case NONE:
            case UNKNOWN:
                return 2.0;
            case LOW:
                return 1.0;
            case HIGH:
                return 0.0;
            default:
                return 2.0;
        }
    }

    public String getAccessVectorCustomRating() {
        switch (accessComplexityScore) {
            case "L":
                return LOW;
            case "A":
                return MEDIUM;
            case "N":
                return HIGH;
        }
        return accessComplexityScore;
    }

    public String geAuthenticationVectorCustomRating() {
        switch (authenticationScore) {
            case "N":
                return NONE;
            case "S":
                return MEDIUM;
            case "M":
                return HIGH;
        }
        return NONE;
    }

    public Double getNvtScore() {
        return nvtScore;
    }

    public String getThreatRating() {
        return threatRating;
    }

    public StyledText getThreatRatingStyledText() {
        return getHighToLowStyledText(threatRating);
    }

    public String getAttackComplexity() {
        switch (accessComplexityScore) {
            case "H":
                return "High";
            case "M":
                return "Medium";
            case "L":
                return "Low";
        }
        return accessComplexityScore;
    }

    private void storeHostInfo(JSONObject object) throws JSONException {
        if (!object.isNull("host")) {
            host = object.getString("host");
        }
        if (!object.isNull("vulnerabilityId")) {
            id = object.getString("vulnerabilityId");
        }
    }

    private void storePortInfo(JSONObject ports) throws JSONException {
        if (!ports.isNull("port")) {
            if (ports.get("port") instanceof String) { // General vulnerability's do not require port info (e.g. OS system outdated)
                return;
            }
            portNumber = ports.getInt("port");
        }

        if (!ports.isNull("protocol")) {
            portProto = ports.getString("protocol");
        }
    }

    private void storeNvtInfo(JSONObject jsonOpenvasNvt) throws JSONException {

        if (!jsonOpenvasNvt.isNull("name")) {
            nvtName = jsonOpenvasNvt.getString("name");
        }

        if (!jsonOpenvasNvt.isNull("technicalname")) {
            technicalNvtName = jsonOpenvasNvt.getString("technicalname");
        }

        if (!jsonOpenvasNvt.isNull("baseScore")) {
            nvtScore = jsonOpenvasNvt.getDouble("baseScore");
        }

        if (!jsonOpenvasNvt.isNull("family")) {
            vulnFamily = jsonOpenvasNvt.getString("family");
        }


        if (!jsonOpenvasNvt.isNull("summary")) {
            summary = jsonOpenvasNvt.getString("summary");
        }

        if (!jsonOpenvasNvt.isNull("impact")) {
            impact = jsonOpenvasNvt.getString("impact");
        }

        if (!jsonOpenvasNvt.isNull("solution")) {
            solution = jsonOpenvasNvt.getString("solution");
        }

        if (!jsonOpenvasNvt.isNull("solution_type")) {
            solutionType = jsonOpenvasNvt.getString("solution_type");
        }

        if (!jsonOpenvasNvt.isNull("solution_type_technical")) {
            solutionTypeTechnical = jsonOpenvasNvt.getString("solution_type_technical");
        }

        if (!jsonOpenvasNvt.isNull("threatRating")) {
            threatRating = jsonOpenvasNvt.getString("threatRating");
        }

        if (!jsonOpenvasNvt.isNull("technicalDetails")) {
            technicalDetails = jsonOpenvasNvt.getString("technicalDetails");
        }

        if (!jsonOpenvasNvt.isNull("baseVector")) {
            String baseVector = jsonOpenvasNvt.getString("baseVector");
            parseCvssBaseVector(baseVector);
        }
    }


    public void storeUrls(JSONObject urls) throws JSONException {
        if (!urls.isNull("urlCount")) {
            urlCount = urls.getInt("urlCount");
            for (Integer i = 0; i < urlCount; i++) {
                JSONObject url = urls.getJSONObject("url" + i.toString());
                UrlInfo urlIno = new UrlInfo();
                urlIno.setUrlInfo(url.getString("urlName"), url.getString("urlDescription"));
                this.urls.add(urlIno);
            }
        }
    }

    private void parseCvssBaseVector(String cvssBaseVectorInfo) {
        final String attackVectorScore = "AV:";
        final String accessComplexityScore = "AC:";
        final String authenticationScore = "Au:";
        final String confidentialityScore = "C:";
        final String integrityScore = "I:";
        final String availabilityScore = "A:";

        String[] parts = cvssBaseVectorInfo.split("/");
        for (int i = 0; i < parts.length; i++) {
            String currentTag = parts[i];
            String key = currentTag.substring(0, currentTag.indexOf(":") + 1);
            switch (key) {
                case attackVectorScore:
                    this.accessVector = currentTag.substring(key.length(), currentTag.length());
                    break;
                case accessComplexityScore:
                    this.accessComplexityScore = currentTag.substring(key.length(), currentTag.length());
                    break;
                case authenticationScore:
                    this.authenticationScore = currentTag.substring(key.length(), currentTag.length());
                    break;
                case confidentialityScore:
                    this.confidentialityScore = getImpactMetrics(currentTag.substring(key.length(), currentTag.length()));
                    break;
                case integrityScore:
                    this.integrityScore = getImpactMetrics(currentTag.substring(key.length(), currentTag.length()));
                    break;
                case availabilityScore:
                    this.availabilityScore = getImpactMetrics(currentTag.substring(key.length(), currentTag.length()));
                    break;
            }
        }
    }

    private String getImpactMetrics(String score) {
        switch (score) {
            case VECTOR_NONE:
                return NONE;
            case VECTOR_LOW:
            case VECTOR_PARTIAL:
                return LOW;
            case VECTOR_HIGH:
            case VECTOR_COMPLETE:
                return HIGH;
            default:
                return UNKNOWN;
        }
    }

    public VulnerabilityResult(Parcel in) {
        id = in.readString();
        host = in.readString();
        portNumber = in.readInt();
        portProto = in.readString();

        nvtName = in.readString();
        nvtScore = in.readDouble();
        vulnFamily = in.readString();

        accessVector = in.readString();
        accessComplexityScore = in.readString();
        authenticationScore = in.readString();
        confidentialityScore = in.readString();
        integrityScore = in.readString();
        availabilityScore = in.readString();
        riskScore = in.readDouble();

        solution = in.readString();
        summary = in.readString();
        impact = in.readString();
        insight = in.readString();
        solutionType = in.readString();

        threatRating = in.readString();
        description = in.readString();

        technicalNvtName = in.readString();
        solutionTypeTechnical = in.readString();
        technicalDetails = in.readString();
        urlCount = in.readInt();

        urls = new ArrayList<>();
        in.readTypedList(urls, UrlInfo.CREATOR);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(id);
        dest.writeString(host);
        dest.writeInt(portNumber);
        dest.writeString(portProto);

        dest.writeString(nvtName);
        dest.writeDouble(nvtScore);
        dest.writeString(vulnFamily);

        dest.writeString(accessVector);
        dest.writeString(accessComplexityScore);
        dest.writeString(authenticationScore);
        dest.writeString(confidentialityScore);
        dest.writeString(integrityScore);
        dest.writeString(availabilityScore);
        dest.writeDouble(riskScore);

        dest.writeString(solution);
        dest.writeString(summary);
        dest.writeString(impact);
        dest.writeString(insight);
        dest.writeString(solutionType);

        dest.writeString(threatRating);
        dest.writeString(description);

        dest.writeString(technicalNvtName);
        dest.writeString(solutionTypeTechnical);
        dest.writeString(technicalDetails);
        dest.writeInt(urlCount);

        dest.writeTypedList(urls);

    }

    public static final Parcelable.Creator<VulnerabilityResult> CREATOR = new Parcelable.Creator<VulnerabilityResult>() {

        @Override
        public VulnerabilityResult createFromParcel(Parcel source) {
            return new VulnerabilityResult(source);
        }

        @Override
        public VulnerabilityResult[] newArray(int size) {
            return new VulnerabilityResult[size];
        }
    };
}
